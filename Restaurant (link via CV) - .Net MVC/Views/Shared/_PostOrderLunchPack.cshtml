@using NepaleseRestaurant.Models

@model PageOrderViewModel
@using (Html.BeginForm("LunchPack", "Home", FormMethod.Post))
{
    @Html.ValidationSummary(true)

    <div class="row rowlove mb-1">
        <div class="col-md-6">
            @Html.TextBoxFor(model => model.Cust.Name, new { @placeholder = "Enter Your Name", @class = "form-control swing", @id = "name", @type = "text", @name = "name" })
            <label for="name">Name</label>
            <div class="validation-message">@Html.ValidationMessageFor(model => model.Cust.Name)</div>
        </div>
        <div class="col-md-6">
            @Html.TextBoxFor(model => model.Cust.Phone, new { @placeholder = "Enter Your Phone Number", @class = "form-control swing", @id = "phone", @type = "text", @name = "email" })
            <label for="phone">Phone</label>
            <div class="validation-message">@Html.ValidationMessageFor(model => model.Cust.Phone)</div>
        </div>
    </div>




    <div class="row mb-1">
        <div class="col-md-12 ">
            <span class="bg-primary pl-1 pr-1 text-center d-block rounded font-weight-normal text-white">For pick up only.</span>

        </div>
    </div>

    <div class="row mb-1">
        <div class="col-md-4 ">
            @Html.DropDownListFor(model => model.Odr.Drinks,Model.Odr.Drinks_L, "-- Select Drink --", new { @placeholder = "Drinks", @class = "form-control", @id = "drinks", @name = "drinks" })
        </div>
        <div class="col-md-4 ">
            @Html.DropDownListFor(model => model.Odr.Curry, Model.Odr.Curry_L, "-- Select Curry --", new { @placeholder = "Curry", @class = "form-control", @id = "curry", @name = "curry" })
        </div>
        <div class="col-md-4 ">
            Rice
        </div>
    </div>








    <div class="row mb-1">
        <div class="col-md-12">
            @Html.TextAreaFor(model => model.Odr.Instructions, new { @placeholder = "Special preferences eg, (make it mild)", @value = "Family Pack", @class = "form-control", @id = "name", @type = "text", @name = "name" })
            <div class="validation-message">@Html.ValidationMessageFor(model => model.Odr.Instructions)</div>
        </div>
    </div>

    <div class="row mt-3 ">
        <div class="col-md-12  grad-blue text-light rounded">
            <h2 class="text-center">Order Details</h2>

            <p class="grand_total">($10)</p>


            <div class="row grad-1 shadow p-2">
                <button type="submit" class="btn btn-success">
                    Send Order
                </button>
            </div>
        </div>
    </div>

}

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCuQAAZ1hWDNKyNGMkxhtPS7RX3JFJTi5g&libraries=places&callback=initAutocomplete"
        async defer></script>

@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCkUOdZ5y7hMm0yrcCQoCvLwzdM6M8s5qk&libraries=places&callback=initAutocomplete"
    async defer></script>*@

<script type="text/javascript">

    var placeSearch, autocomplete;
    var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
    };

    function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            (document.getElementById('autocomplete')),
            { types: ['geocode'] });

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
    }

    function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
            document.getElementById(component).value = '';
            document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
            var addressType = place.address_components[i].types[0];
            if (componentForm[addressType]) {
                var val = place.address_components[i][componentForm[addressType]];
                document.getElementById(addressType).value = val;
            }
        }
    }

    // Bias the autocomplete object to the user's geographical location,
    // as supplied by the browser's 'navigator.geolocation' object.
    function geolocate() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                var geolocation = {
                    lat: position.coords.latitude,
                    lng: position.coords.longitude
                };
                var circle = new google.maps.Circle({
                    center: geolocation,
                    radius: position.coords.accuracy
                });
                autocomplete.setBounds(circle.getBounds());
            });
        }
    }

</script>
